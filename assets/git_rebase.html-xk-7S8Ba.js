import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c as r,d as e,e as t,a as l,b as a}from"./app-DrsE8OIX.js";const c="/work-blog/assets/git-rebase-skITvznj.png",p={},m=a(`<h2 id="自动变基" tabindex="-1"><a class="header-anchor" href="#自动变基"><span>自动变基</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> pull.rebase <span class="token boolean">true</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> rebase.autoStash <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>如果不想了解原理的话，则执行完上面两条命令就可以去开心地变基了，完全没有问题。如果想了解一些原理，可以接着往下看。下面我们来详细解释一下这两条命令的原理：</p><p>首先，我们要搞清楚一点：什么时机是变基的时机？一般理解是推送的时候，其实不是，而是从拉取的时候就要开始变基了，因为你拉取的时候，服务器上可能已经有新代码了，所以要变基也是在这个时候，一旦发现有新基础了，则立马变掉。所以，通常情况下，我们拉取新代码无非就是一个命令：git pull，但现在我们要变基拉取，就需要用git pull --rebase。但是每次这样执行命令就会很麻烦，而且你在vscode里也没有办法自动加这个参数，所以为了方便起见，我们就设置一下第一条命令，这样每次拉取它都会自动变基。</p><p>但是自动变基往往会带来一个额外的问题，那就是每次当你手头有正在编辑的文件的时候，它就说它无法变基，因为你的工作区不干净。为什么不变基的时候没有这个问题，而一旦选择了自动变基，工作区就必须保持干净呢？因为变基的操作原理是它需要先把你本地代码库里还没有推送的那部分提交反向释放到工作区，然后从服务器拉取新代码，再以新代码为基础把工作区里的修改附加上去，因为有这个过程，所以它必须要求你的服务区是干净的。为此git提了两个建议：要么你把所有修改先全部都commit到本地，要么你把它们都stash保存起来。首先说，commit肯定不是一个好主意，因为很有可能这时候我们的工作做到一半，还不适合commit，如果每次pull都commit一下的话，那么分支树上会多出很多无用的节点。那只剩下最后一个选择，就是每次pull之前都stash一下，pull完了之后再把stash的内容pop出来，但这样岂不是更麻烦？所以这里我们用第二条命令设置一下，每次rebase的时候都自动把我们工作区里的内容自动stash进去，rebase完成之后再自动恢复出来。</p><p>其余要注意的就是有冲突的时候，如果有冲突，则合并完冲突之后，执行一下git rebase --continue就好了，其它和原先的用法没有任何区别。</p>`,7),d={href:"https://segmentfault.com/a/1190000040712052",target:"_blank",rel:"noopener noreferrer"},h=a(`<h2 id="合并最近两次提交" tabindex="-1"><a class="header-anchor" href="#合并最近两次提交"><span>合并最近两次提交</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">选项说明</p><p>pick：保留该commit（缩写:p）</p><p>reword：保留该commit，但我需要修改该commit的注释（缩写:r）</p><p>edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）</p><p>squash：将该commit和前一个commit合并（缩写:s）用的比较多</p><p>fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）</p><p>exec：执行shell命令（缩写:x）</p><p>drop：我要丢弃该commit（缩写:d） <img src="`+c+'" alt="rebase" loading="lazy"></p></div>',3);function g(u,b){const s=o("ExternalLinkIcon");return i(),r("div",null,[m,e("p",null,[t("摘抄 ："),e("a",d,[t("两条命令让你的git自动变基"),l(s)])]),h])}const v=n(p,[["render",g],["__file","git_rebase.html.vue"]]),k=JSON.parse('{"path":"/software/git/git_rebase.html","title":"rebase","lang":"zh-CN","frontmatter":{"title":"rebase","icon":"laptop-code","order":3,"category":"Git","tag":["Git","shell"],"description":"自动变基 原理 如果不想了解原理的话，则执行完上面两条命令就可以去开心地变基了，完全没有问题。如果想了解一些原理，可以接着往下看。下面我们来详细解释一下这两条命令的原理： 首先，我们要搞清楚一点：什么时机是变基的时机？一般理解是推送的时候，其实不是，而是从拉取的时候就要开始变基了，因为你拉取的时候，服务器上可能已经有新代码了，所以要变基也是在这个时候，...","head":[["meta",{"property":"og:url","content":"https://yuhaoxiang.github.io/work-blog/work-blog/software/git/git_rebase.html"}],["meta",{"property":"og:site_name","content":"大杂烩"}],["meta",{"property":"og:title","content":"rebase"}],["meta",{"property":"og:description","content":"自动变基 原理 如果不想了解原理的话，则执行完上面两条命令就可以去开心地变基了，完全没有问题。如果想了解一些原理，可以接着往下看。下面我们来详细解释一下这两条命令的原理： 首先，我们要搞清楚一点：什么时机是变基的时机？一般理解是推送的时候，其实不是，而是从拉取的时候就要开始变基了，因为你拉取的时候，服务器上可能已经有新代码了，所以要变基也是在这个时候，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-15T02:53:11.000Z"}],["meta",{"property":"article:author","content":"yhx"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:modified_time","content":"2025-04-15T02:53:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"rebase\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-15T02:53:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yhx\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"自动变基","slug":"自动变基","link":"#自动变基","children":[{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]}]},{"level":2,"title":"合并最近两次提交","slug":"合并最近两次提交","link":"#合并最近两次提交","children":[]}],"git":{"createdTime":1714294039000,"updatedTime":1744685591000,"contributors":[{"name":"haoxiang.yu@sectrend.com.cn","email":"ZLJw5dEMQLaVgsP","commits":1},{"name":"余浩翔","email":"1x2_ou6tn9m4r4@dingtalk.com","commits":1}]},"readingTime":{"minutes":2.98,"words":894},"filePathRelative":"software/git/git_rebase.md","localizedDate":"2024年4月28日","autoDesc":true}');export{v as comp,k as data};
