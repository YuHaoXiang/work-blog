import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as e,b as a}from"./app-DrsE8OIX.js";const t={},p=a(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vi</span> /etc/sysctl.conf
<span class="token comment"># add by digoal.zhou</span>
fs.aio-max-nr <span class="token operator">=</span> <span class="token number">1048576</span>
fs.file-max <span class="token operator">=</span> <span class="token number">76724600</span>
<span class="token assign-left variable">kernel.core_pattern</span><span class="token operator">=</span> /data01/corefiles/core_%e_%u_%t_%s.%p   <span class="token comment"># /data01/corefiles事先建好，权限777</span>
kernel.sem <span class="token operator">=</span> <span class="token number">4096</span> <span class="token number">2147483647</span> <span class="token number">2147483646</span> <span class="token number">512000</span>    <span class="token comment"># 信号量, ipcs -l 或 -u 查看，每16个进程一组，每组信号量需要17个信号量。</span>
kernel.shmall <span class="token operator">=</span> <span class="token number">107374182</span>      <span class="token comment"># 所有共享内存段相加大小限制(建议内存的80%)</span>
kernel.shmmax <span class="token operator">=</span> <span class="token number">274877906944</span>   <span class="token comment"># 最大单个共享内存段大小(建议为内存一半), &gt;9.2的版本已大幅降低共享内存的使用</span>
kernel.shmmni <span class="token operator">=</span> <span class="token number">819200</span>         <span class="token comment"># 一共能生成多少共享内存段，每个PG数据库集群至少2个共享内存段</span>
net.core.netdev_max_backlog <span class="token operator">=</span> <span class="token number">10000</span>
net.core.rmem_default <span class="token operator">=</span> <span class="token number">262144</span>       <span class="token comment"># The default setting of the socket receive buffer in bytes.</span>
net.core.rmem_max <span class="token operator">=</span> <span class="token number">4194304</span>          <span class="token comment"># The maximum receive socket buffer size in bytes</span>
net.core.wmem_default <span class="token operator">=</span> <span class="token number">262144</span>       <span class="token comment"># The default setting (in bytes) of the socket send buffer.</span>
net.core.wmem_max <span class="token operator">=</span> <span class="token number">4194304</span>          <span class="token comment"># The maximum send socket buffer size in bytes.</span>
net.core.somaxconn <span class="token operator">=</span> <span class="token number">4096</span>
net.ipv4.tcp_max_syn_backlog <span class="token operator">=</span> <span class="token number">4096</span>
net.ipv4.tcp_keepalive_intvl <span class="token operator">=</span> <span class="token number">20</span>
net.ipv4.tcp_keepalive_probes <span class="token operator">=</span> <span class="token number">3</span>
net.ipv4.tcp_keepalive_time <span class="token operator">=</span> <span class="token number">60</span>
net.ipv4.tcp_mem <span class="token operator">=</span> <span class="token number">8388608</span> <span class="token number">12582912</span> <span class="token number">16777216</span>
net.ipv4.tcp_fin_timeout <span class="token operator">=</span> <span class="token number">5</span>
net.ipv4.tcp_synack_retries <span class="token operator">=</span> <span class="token number">2</span>
net.ipv4.tcp_syncookies <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment"># 开启SYN Cookies。当出现SYN等待队列溢出时，启用cookie来处理，可防范少量的SYN攻击</span>
net.ipv4.tcp_timestamps <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment"># 减少time_wait</span>
net.ipv4.tcp_tw_recycle <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 如果=1则开启TCP连接中TIME-WAIT套接字的快速回收，但是NAT环境可能导致连接失败，建议服务端关闭它</span>
net.ipv4.tcp_tw_reuse <span class="token operator">=</span> <span class="token number">1</span>      <span class="token comment"># 开启重用。允许将TIME-WAIT套接字重新用于新的TCP连接</span>
net.ipv4.tcp_max_tw_buckets <span class="token operator">=</span> <span class="token number">262144</span>
net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">8192</span> <span class="token number">87380</span> <span class="token number">16777216</span>
net.ipv4.tcp_wmem <span class="token operator">=</span> <span class="token number">8192</span> <span class="token number">65536</span> <span class="token number">16777216</span>
net.nf_conntrack_max <span class="token operator">=</span> <span class="token number">1200000</span>
net.netfilter.nf_conntrack_max <span class="token operator">=</span> <span class="token number">1200000</span>
vm.dirty_background_bytes <span class="token operator">=</span> <span class="token number">4096000000</span>       <span class="token comment">#  系统脏页到达这个值，系统后台刷脏页调度进程 pdflush（或其他） 自动将(dirty_expire_centisecs/100）秒前的脏页刷到磁盘</span>
vm.dirty_expire_centisecs <span class="token operator">=</span> <span class="token number">6000</span>             <span class="token comment">#  比这个值老的脏页，将被刷到磁盘。6000表示60秒。</span>
vm.dirty_ratio <span class="token operator">=</span> <span class="token number">80</span>                          <span class="token comment">#  如果系统进程刷脏页太慢，使得系统脏页超过内存 80 % 时，则用户进程如果有写磁盘的操作（如fsync, fdatasync等调用），则需要主动把系统脏页刷出。</span>
vm.dirty_writeback_centisecs <span class="token operator">=</span> <span class="token number">50</span>            <span class="token comment">#  pdflush（或其他）后台刷脏页进程的唤醒间隔， 50表示0.5秒。</span>
vm.extra_free_kbytes <span class="token operator">=</span> <span class="token number">4096000</span>
vm.min_free_kbytes <span class="token operator">=</span> <span class="token number">2097152</span>
vm.mmap_min_addr <span class="token operator">=</span> <span class="token number">65536</span>
vm.overcommit_memory <span class="token operator">=</span> <span class="token number">0</span>     <span class="token comment">#  在分配内存时，允许少量over malloc</span>
vm.overcommit_ratio <span class="token operator">=</span> <span class="token number">90</span>     <span class="token comment">#  当overcommit_memory = 2 时，用于参与计算允许指派的内存大小。</span>
vm.swappiness <span class="token operator">=</span> <span class="token number">0</span>            <span class="token comment">#  关闭交换分区</span>
vm.zone_reclaim_mode <span class="token operator">=</span> <span class="token number">0</span>     <span class="token comment"># 禁用 numa, 或者在vmlinux中禁止.</span>
net.ipv4.ip_local_port_range <span class="token operator">=</span> <span class="token number">40000</span> <span class="token number">65535</span>    <span class="token comment"># 本地自动分配的TCP, UDP端口号范围</span>
<span class="token comment">#  vm.nr_hugepages = 102352    #  建议shared buffer设置超过64GB时 使用大页，页大小 /proc/meminfo Hugepagesize</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),o=[p];function r(c,l){return s(),e("div",null,o)}const k=n(t,[["render",r],["__file","kernel_optimize.html.vue"]]),d=JSON.parse('{"path":"/software/linux/kernel_optimize.html","title":"内核参数优化参考","lang":"zh-CN","frontmatter":{"title":"内核参数优化参考","catalog":"Linux","head":[["meta",{"property":"og:url","content":"https://yuhaoxiang.github.io/work-blog/work-blog/software/linux/kernel_optimize.html"}],["meta",{"property":"og:site_name","content":"大杂烩"}],["meta",{"property":"og:title","content":"内核参数优化参考"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-15T01:10:45.000Z"}],["meta",{"property":"article:author","content":"yhx"}],["meta",{"property":"article:modified_time","content":"2024-11-15T01:10:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内核参数优化参考\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-15T01:10:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yhx\\",\\"url\\":\\"/\\"}]}"]]},"headers":[],"git":{"createdTime":1731633045000,"updatedTime":1731633045000,"contributors":[{"name":"余浩翔","email":"1x2_ou6tn9m4r4@dingtalk.com","commits":1}]},"readingTime":{"minutes":1.94,"words":581},"filePathRelative":"software/linux/kernel_optimize.md","localizedDate":"2024年11月15日"}');export{k as comp,d as data};
