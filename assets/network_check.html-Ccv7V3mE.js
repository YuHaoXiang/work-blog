import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as e}from"./app-DrsE8OIX.js";const t={},p=e(`<h2 id="格式化某些-proc文件输出" tabindex="-1"><a class="header-anchor" href="#格式化某些-proc文件输出"><span>格式化某些 /proc文件输出</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cat /proc/net/snmp </span>
Ip: Forwarding DefaultTTL InReceives InHdrErrors InAddrErrors ForwDatagrams InUnknownProtos InDiscards InDelivers OutRequests OutDiscards OutNoRoutes ReasmTimeout ReasmReqds ReasmOKs ReasmFails FragOKs FragFails FragCreates
Ip: <span class="token number">2</span> <span class="token number">64</span> <span class="token number">1112736</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1112733</span> <span class="token number">1112545</span> <span class="token number">0</span> <span class="token number">36</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>
Icmp: InMsgs InErrors InCsumErrors InDestUnreachs InTimeExcds InParmProbs InSrcQuenchs InRedirects InEchos InEchoReps InTimestamps InTimestampReps InAddrMasks InAddrMaskReps OutMsgs OutErrors OutDestUnreachs OutTimeExcds OutParmProbs OutSrcQuenchs OutRedirects OutEchos OutEchoReps OutTimestamps OutTimestampReps OutAddrMasks OutAddrMaskReps
Icmp: <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>
Tcp: RtoAlgorithm RtoMin RtoMax MaxConn ActiveOpens PassiveOpens AttemptFails EstabResets CurrEstab InSegs OutSegs RetransSegs InErrs OutRsts InCsumErrors
Tcp: <span class="token number">1</span> <span class="token number">200</span> <span class="token number">120000</span> <span class="token parameter variable">-1</span> <span class="token number">2207</span> <span class="token number">2204</span> <span class="token number">4</span> <span class="token number">598</span> <span class="token number">3803</span> <span class="token number">1112646</span> <span class="token number">1112462</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">303</span> <span class="token number">0</span>
Udp: InDatagrams NoPorts InErrors OutDatagrams RcvbufErrors SndbufErrors InCsumErrors IgnoredMulti
Udp: <span class="token number">176</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">91</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>
UdpLite: InDatagrams NoPorts InErrors OutDatagrams RcvbufErrors SndbufErrors InCsumErrors IgnoredMulti
UdpLite: <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一行是字段，第二行是字段的值。这些输出每一行包含的字段太多，字段和值又没对齐，看着太费劲，遂用。</p><p>awk命令格式化下这类输出，以后方便查看。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;{\\
    if (NR % 2 == 0) print $1;\\
    for(i = 2; i &lt;= NF; i++) {\\
        if (NR % 2 ) \\
            count[i] = $i;\\
        else if ($i &gt; 0) \\
            printf(&quot;    %-28s:%d\\n&quot;,count[i], $i);\\
    }\\
}&#39;</span> <span class="token punctuation">\\</span>
/proc/net/snmp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述命令按格式打印非0值的字段和值。该命令也适合<code>/proc/net/netstat</code>文件，结合<code>watch</code>命令就能定时得查看这些值的变化，命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token string">&quot;awk &#39;{if (NR % 2 == 0) print \\<span class="token variable">$1</span>;for(i = 2; i &lt;= NF; i++) {if (NR % 2 ) count[i]=\\<span class="token variable">$i</span>; else if (\\<span class="token variable">$i</span> &gt; 0 ) printf(<span class="token entity" title="\\&quot;">\\&quot;</span>    %-28s%d<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\&quot;">\\&quot;</span>,count[i], \\<span class="token variable">$i</span>);}}&#39; /proc/net/netstat&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更进一步，watch 命令只能看到某个时间点的数值统计，如果想查看每秒钟数值的变化，就不那么容易了，我花了些时间写了如下命令来实现这个效果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 这个命令会每秒钟输出/proc/net/snmp 和 /proc/net/netstat文件中数值的变化</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;&#39;</span> <span class="token operator">&gt;</span> tmp.txt<span class="token punctuation">;</span> <span class="token punctuation">\\</span>
<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token punctuation">\\</span>
    <span class="token function">awk</span> <span class="token string">&#39;{for(i = 2; i &lt;= NF; i++) {if (NR % 2 ) count[i] = $i; else if ($i &gt; 0 ) print count[i], $i;}}&#39;</span> <span class="token punctuation">\\</span>
        /proc/net/snmp /proc/net/netstat <span class="token operator">&gt;&gt;</span> tmp.txt<span class="token punctuation">;</span> <span class="token punctuation">\\</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $i % <span class="token number">2</span><span class="token variable">\`</span></span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">printf</span> <span class="token string">&quot;<span class="token entity" title="\\033">\\033</span>c&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
        <span class="token function">awk</span> <span class="token string">&#39;{if (a[$1]) {if ($2 != a[$1]) printf(&quot;%-28s%d\\n&quot;, $1, $2 - a[$1])} else a[$1] = $2;}&#39;</span> tmp.txt<span class="token punctuation">;</span> <span class="token punctuation">\\</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&#39;&#39;</span> <span class="token operator">&gt;</span> tmp.txt<span class="token punctuation">;</span><span class="token punctuation">\\</span>
    <span class="token keyword">else</span> <span class="token punctuation">\\</span>
        <span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">\\</span>
    <span class="token keyword">fi</span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[p];function c(r,l){return s(),a("div",null,o)}const m=n(t,[["render",c],["__file","network_check.html.vue"]]),d=JSON.parse('{"path":"/shell_script/network_check.html","title":"网络问题排查命令行","lang":"zh-CN","frontmatter":{"title":"网络问题排查命令行","catalog":"Shell","icon":"tools","description":"格式化某些 /proc文件输出 第一行是字段，第二行是字段的值。这些输出每一行包含的字段太多，字段和值又没对齐，看着太费劲，遂用。 awk命令格式化下这类输出，以后方便查看。 上述命令按格式打印非0值的字段和值。该命令也适合/proc/net/netstat文件，结合watch命令就能定时得查看这些值的变化，命令如下： 更进一步，watch 命令只能看...","head":[["meta",{"property":"og:url","content":"https://yuhaoxiang.github.io/work-blog/work-blog/shell_script/network_check.html"}],["meta",{"property":"og:site_name","content":"大杂烩"}],["meta",{"property":"og:title","content":"网络问题排查命令行"}],["meta",{"property":"og:description","content":"格式化某些 /proc文件输出 第一行是字段，第二行是字段的值。这些输出每一行包含的字段太多，字段和值又没对齐，看着太费劲，遂用。 awk命令格式化下这类输出，以后方便查看。 上述命令按格式打印非0值的字段和值。该命令也适合/proc/net/netstat文件，结合watch命令就能定时得查看这些值的变化，命令如下： 更进一步，watch 命令只能看..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-28T08:47:19.000Z"}],["meta",{"property":"article:author","content":"yhx"}],["meta",{"property":"article:modified_time","content":"2024-04-28T08:47:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网络问题排查命令行\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-28T08:47:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yhx\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"格式化某些 /proc文件输出","slug":"格式化某些-proc文件输出","link":"#格式化某些-proc文件输出","children":[]}],"git":{"createdTime":1714294039000,"updatedTime":1714294039000,"contributors":[{"name":"haoxiang.yu@sectrend.com.cn","email":"ZLJw5dEMQLaVgsP","commits":1}]},"readingTime":{"minutes":1.72,"words":516},"filePathRelative":"shell_script/network_check.md","localizedDate":"2024年4月28日","autoDesc":true}');export{m as comp,d as data};
